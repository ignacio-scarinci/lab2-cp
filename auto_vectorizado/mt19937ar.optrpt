Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -O2 -march=native -qopt-report=5 -qopt-report-phase=vec -o ./auto_vectorizado/clang_100k_con -lm

Begin optimization report for: genrand_int32(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(115,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(115,13)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand_int31(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(145,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(145,19)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(145,19)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(145,19)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(145,19)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(145,19)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand_real1(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(151,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(151,12)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(151,12)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(151,12)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(151,12)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(151,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand_real2(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(158,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(158,12)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(158,12)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(158,12)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(158,12)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(158,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand_real3(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(165,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(165,22)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(165,22)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(165,22)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(165,22)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(165,22)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand_res53(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(172,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(172,21)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(172,21)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(172,21)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(172,21)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(172,21)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(172,43)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(172,43)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(172,43)
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(118,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(118,38) ]
   remark #15388: vectorization support: reference mt[kk] has aligned access   [ mt19937ar.c(119,13) ]
   remark #15389: vectorization support: reference mt[kk+397] has unaligned access   [ mt19937ar.c(119,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(119,44) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 16.000 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(117,9) inlined into mt19937ar.c(172,43)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(172,43)
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(122,18) ]
   remark #15389: vectorization support: reference mt[kk+1] has unaligned access   [ mt19937ar.c(122,38) ]
   remark #15389: vectorization support: reference mt[kk] has unaligned access   [ mt19937ar.c(123,13) ]
   remark #15389: vectorization support: reference mt[kk-227] has unaligned access   [ mt19937ar.c(123,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mag01[y&1]>, 64-bit indexed, part of index is read from memory   [ mt19937ar.c(123,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.290
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mt19937ar.c(121,9) inlined into mt19937ar.c(172,43)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: init_by_array(unsigned long *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(82,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5) inlined into mt19937ar.c(82,5)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(85,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between mt[i] (86:9) and mt[0] (90:21)
   remark #15346: vector dependence: assumed OUTPUT dependence between mt[0] (90:21) and mt[i] (86:9)
LOOP END

LOOP BEGIN at mt19937ar.c(85,5)
<Remainder>
LOOP END

LOOP BEGIN at mt19937ar.c(93,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between mt[i] (94:9) and mt[0] (98:21)
   remark #15346: vector dependence: assumed OUTPUT dependence between mt[0] (98:21) and mt[i] (94:9)
LOOP END

LOOP BEGIN at mt19937ar.c(93,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: init_genrand(unsigned long)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937ar.c(63,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt[mti] (64:9) and mt[mti-1] (64:9)
LOOP END

LOOP BEGIN at mt19937ar.c(63,5)
<Remainder>
LOOP END
===========================================================================
